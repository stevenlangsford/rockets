// var canvaswidth = 1100;//window.innerWidth-30;
// var canvasheight = 650;//window.innerHeight-30;

document.getElementById("uberdiv").innerHTML = " <canvas id=\"ubercanvas\"></canvas>"

function makeRocket(fuel_value, base_value, display_type,idstring){
    if(fuel_value <0 || fuel_value > 1)alert("rocket fuel not in 0-1:"+fuel_value+"_"+base_value+"_"+display_type+"_"+idstring);
    if(base_value <0 || base_value > 1)alert("rocket base not in 0-1:"+fuel_value+"_"+base_value+"_"+display_type+"_"+idstring); //better way of doing asserts than this?
    
    this.fuel = fuel_value;
    this.base = base_value;
    this.type = display_type;

    this.drawMe = function(x, y){
	var canvas = document.getElementById('ubercanvas');
	var ctx = canvas.getContext('2d');
	
	var targheight = canvas.height;
	var targwidth = canvas.width;

	var scale = window.devicePixelRatio; // Change to 1 on retina screens to see blurry canvas.
	canvas.width = targwidth * scale;
	canvas.height = targheight * scale;
	ctx.scale(scale, scale);
	
	var bw = 10; //bodywidth (halved, center-to-edge dist)
	var bh = 20; //bodyheight
	var hw = 5; //hatwidth (overhang bit only)
	var hh = bh*(2/3); //hatheight
	var lh = bh*3/4; //leg height
	var maxbase = bw*2.5; //base width is a variable feature: base_value * maxbase (base value in 0-1)
	var legwidth = 5; //line thickness
	

	ctx.beginPath();
	ctx.moveTo(x , y);

	ctx.lineTo(x-bw, y);
	ctx.lineTo(x-bw, y-bh);
	ctx.lineTo(x-bw-hw, y-bh);
	ctx.lineTo(x, y-bh-hh);
	ctx.lineTo(x+bw+hw, y-bh);
	ctx.lineTo(x+bw, y-bh);
	ctx.lineTo(x+bw, y);
	ctx.lineTo(x, y);
	ctx.fill();

	ctx.moveTo(x-0.5*bw, y);
	ctx.lineWidth = legwidth;
	ctx.lineTo(x-0.5*this.base*maxbase, y+lh);
	ctx.moveTo(x+0.5*bw,y);
	ctx.lineTo(x+0.5*this.base*maxbase, y+lh);
	ctx.stroke();

	
    }//end drawme
    
}


var bob = new makeRocket(.5,.5,"display","bob");

bob.drawMe(100.5,100.5);
// //Generic sequence-of-trials
// //If that's all you want, all you need to edit is the makeTrial object and the responseListener. Give maketrial an appropriate constructor that accept the key trial properties, a drawMe function, and something that will hit responseListener.
// //then put a list of trial-property-setter entries in 'stim' and you're golden.

// var trials = [];
// var trialindex = 0;

// function responseListener(aresponse){//global so it'll be just sitting here available for the trial objects to use. So, it must accept whatever they're passing.
// //    console.log("responseListener heard: "+aresponse); //diag
//     trials[trialindex].response = aresponse;
//     trials[trialindex].responseTime= Date.now();
    
//     $.post('/response',{myresponse:JSON.stringify(trials[trialindex])},function(success){
//     	console.log(success);//For now server returns the string "success" for success, otherwise error message.
//     });
    
//     //can put this inside the success callback, if the next trial depends on some server-side info.
//     trialindex++; //increment index here at the last possible minute before drawing the next trial, so trials[trialindex] always refers to the current trial.
//     nextTrial();
// }

// function nextTrial(){
//     if(trialindex<trials.length){
// 	trials[trialindex].drawMe("uberdiv");
//     }else{
// 	$.post("/finish",function(data){window.location.replace(data)});
//     }
// }

// // a trial object should have a drawMe function and a bunch of attributes.
// //the data-getting process in 'dashboard.ejs' & getData routes creates a csv with a col for every attribute, using 'Object.keys' to list all the properties of the object. Assumes a pattern where everything interesting is saved to the trial object, then that is JSONified and saved as a response.
// //Note functions are dropped by JSON.
// //Also note this means you have to be consistent with the things that are added to each trial before they are saved, maybe init with NA values in the constructor.
// function makeTrial(questiontext){
//     this.ppntID = localStorage.getItem("ppntID");
//     this.questiontext = questiontext;
//     this.drawMe = function(targdiv){
// 	this.drawTime = Date.now();
// 	var responses = "<button onclick='responseListener(\"yes\")'>Yes</button><button onclick='responseListener(\"no\")'>No</button>";
// 	document.getElementById(targdiv).innerHTML=
// 	    "<div class='trialdiv'><p>"+this.questiontext+"</br>"+responses+"</p></div>";
//     }
// }



// function shuffle(a) { //via https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array
//     var j, x, i;
//     for (i = a.length - 1; i > 0; i--) {
//         j = Math.floor(Math.random() * (i + 1));
//         x = a[i];
//         a[i] = a[j];
//         a[j] = x;
//     }
//     return a;
// }
// //****************************************************************************************************
// //Stimuli
// var stim = shuffle(["Does this question have a correct answer?","What is the correct answer to this question?"]);
// trials = stim.map(function(x){return new makeTrial(x)});

// nextTrial();
